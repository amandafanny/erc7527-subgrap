type DeployV2 @entity(immutable: true) {
  id: Bytes!
  agencyImplementation: Bytes! # address
  agencyInstance: AgencyInstance! # address
  appImplementation: Bytes! # address
  appInstance: AppInstance!
  tokenId: DotAgency! # uint256
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type AppInstance @entity {
  id: Bytes!
  name: String!
  totalSupply: BigInt!
  address: Bytes!
  doubleLayerStakingL2: DoubleLayerStakingL2
}

type Agent @entity {
  id: Bytes!
  name: String!
  tokenId: BigInt!
  appImplementation: Bytes!
  appInstance: AppInstance!
  agencyImplementation: Bytes!
  agencyInstance: AgencyInstance!
  holder: Holder!
  stakeState: Int!
  erc6551: Erc6551!
  node: Node!
  agentActivity: [AgentActivity!] @derivedFrom(field: "agent")
  doubleLayerStakingL2TokenIdRewardDebt: DoubleLayerStakingL2TokenIdRewardDebt
}

type Holder @entity {
  id: Bytes!
  address: Bytes!
  dotAgencyTokens: [DotAgency!] @derivedFrom(field: "holder")
  agentTokens: [Agent!] @derivedFrom(field: "holder")
  premiumDAO: [PremiumDAO!] @derivedFrom(field: "holder")
  lp: LP
}

type DotAgency @entity {
  id: Bytes!
  tokenId: BigInt! # uint256
  name: String!
  holder: Holder!
  mintPrice: BigInt!
  erc6551: Erc6551!
  timestap: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  node: Node!
  deployV2: [DeployV2!] @derivedFrom(field: "tokenId")
}

type PremiumDAO @entity {
  id: Bytes!
  tokenId: BigInt! # uint256
  holder: Holder!
  erc6551: Erc6551!
  transactionHash: Bytes!
}

type LP @entity {
  id: Bytes!
  holder: Holder!
  amount: BigInt!
  rewardDebt: BigInt!
  rewardToken: Currency!
}

type AgencyInstance @entity {
  id: Bytes!
  currency: Currency!
  mintFeePercent: Int!
  burnFeePercent: Int!
  tvl: BigInt!
  swap: BigInt!
  fee: BigInt!
  feeCount: BigInt!
  #  10 ** 12
  perTokenReward: BigInt!
  isRenounceForceApprove: Boolean!
  isRenounceForceCancel: Boolean!
  agencyApprove: [AgencyApprove!] @derivedFrom(field: "address")
}

type AgencyApprove @entity {
  id: Bytes!
  address: AgencyInstance!
  target: Bytes!
  selector: Bytes!
  value: Boolean!
}

type Currency @entity(immutable: true) {
  id: Bytes!
  symbol: String!
  decimals: Int!
}

type DoubleLayerCreatorAccount @entity {
  id: Bytes!
  account: Bytes!
  claim: BigInt!
}

type DoubleLayerDotAgency @entity {
  id: Bytes!
  tokenId: BigInt!
  claim: BigInt!
}

type DoubleLayerStakingL2 @entity {
  id: Bytes!
  appInstance: AppInstance!
  tvl: BigInt!
  points: BigInt!
  lastRewardBlock: BigInt!
  accTokenPerShare: BigInt!
  rewardDebt: BigInt!
  tokenPerBlock: BigInt!
  unspentRewards: BigInt!
  endBlockOfEpoch: BigInt!
  currencyType: String!
  rewardToken: Currency!
  requestedCurrency: Currency!
}

type DoubleLayerStakingL2TokenIdRewardDebt @entity {
  id: Bytes!
  contractAddress: Bytes!
  tokenId: BigInt!
  rewardDebt: BigInt!
  agent: Agent!
}

type AgentActivity @entity(immutable: true) {
  id: Bytes!
  agent: Agent!
  type: String!
  fee: BigInt!
  swap: BigInt!
  timestap: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  to: Bytes!
}

type Erc6551 @entity(immutable: true) {
  id: Bytes!
  account: Bytes!
  tokenId: BigInt!
  chainId: BigInt!
  contractAddress: Bytes!
  implementation: Bytes!
  salt: Bytes!
  transactionHash: Bytes!
  blockNumber: BigInt!
  executes: [Execute!] @derivedFrom(field: "erc6551")
}

type Execute @entity(immutable: true) {
  id: Bytes!
  target: Bytes!
  value: BigInt!
  data: Bytes!
  operation: Int!
  transactionHash: Bytes!
  blockNumber: BigInt!
  erc6551: Erc6551!
}

type Node @entity {
  id: Bytes!
  resolver: Resolver!
  bonds: [Bond!] @derivedFrom(field: "node")
}

type Resolver @entity {
  id: Bytes!
  node: [Node!] @derivedFrom(field: "resolver")
  bonds: [Bond!] @derivedFrom(field: "resolver")
}

type Bond @entity {
  id: Bytes!
  resolver: Resolver!
  key: String!
  value: String!
  node: Node!
  version: BigInt!
}
